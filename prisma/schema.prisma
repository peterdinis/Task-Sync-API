generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id                 String              @id @default(cuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  description        String              @default("Your project description")
  projectName        String              @default("Your project name")
  members            Int                 @default(1)
  membersList        User[]              @relation("ProjectMembers")
  ownerUsername      String
  projectMemberships ProjectMembership[]
  tasks              Task[]
  epic               Epic[]
}

model Epic {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @default("Epic name")
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  isFinished  Boolean  @default(false)
  description String
  tasks       Task[]
}

model User {
  id                 String              @id @default(cuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  username           String
  email              String
  password           String
  tasks              Task[]
  projectsList       Project[]           @relation("ProjectMembers")
  projectMemberships ProjectMembership[]
}

model Task {
  id                 String            @id @default(cuid())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  description        String
  name               String
  isCompleted        Boolean           @default(false)
  importantPriority  ImporatntPriority
  reporter           String
  User               User              @relation(fields: [userId], references: [id])
  userId             String
  project            Project           @relation(fields: [projectId], references: [id])
  projectId          String
  isDone             Boolean?
  totalSec           Int?              @default(0)
  startWorkingOnTask Boolean?          @default(false)
  infoImage          String?
  epicId             String
  epic               Epic         @relation(fields: [epicId], references: [id], onDelete: Cascade)
  isForEpic          Boolean
}

enum ImporatntPriority {
  Low
  Medium
  High
  Extreme
  Blocker
}

// Pomocná mapovacia tabuľka
model ProjectMembership {
  userId    String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@id([userId, projectId])
}
