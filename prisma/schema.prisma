generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id                 String              @id @default(cuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  members            Int                 @default(1)
  membersList        User[]              @relation("ProjectMembers")
  projectMemberships ProjectMembership[]
  tasks              Task[]
}

model User {
  id                 String              @id @default(cuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  username           String
  email              String
  password           String
  breakCount         Int?
  workCount          Int?
  intervalBreaks     Int?
  Task               Task[]
  TaskTimer          TaskTimer[]
  TaskBlock          TaskBlock[]
  projectsList       Project[]           @relation("ProjectMembers")
  projectMemberships ProjectMembership[]
}

model Task {
  id                String            @id @default(cuid())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  name              String
  isImportant       Boolean           @default(false)
  isCompleted       Boolean           @default(false)
  importantPriority ImporatntPriority
  User              User              @relation(fields: [userId], references: [id])
  userId            String
  project           Project           @relation(fields: [projectId], references: [id])
  projectId         String
}

model TaskBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  color     String?
  duration  Int
  order     Int      @default(1)
  User      User     @relation(fields: [userId], references: [id])
  userId    String
}

model TaskTimer {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  isDone    Boolean?
  User      User        @relation(fields: [userId], references: [id])
  userId    String
  TaskRound TaskRound[]
}

model TaskRound {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  totalSec    Int
  isDone      Boolean?
  taskTimerId String
  taskTimer   TaskTimer @relation(fields: [taskTimerId], references: [id], onDelete: Cascade)
}

enum ImporatntPriority {
  Low
  Medium
  High
  Extreme
  Blocker
}

model ProjectMembership {
  userId    String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define foreign keys
  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@id([userId, projectId])
}
